'use strict';
var Name;
var deb=require('DEBUG')['debug'];
var fs=require('fs');
function debug(text){
    //console.log(deb);
    deb(text,Name);
}
exports.getN=function(n){
    Name=n;
};

var http = require('http');
var url = require('url');
var fC = require('MyModules/folderCreator');
var request = require('request');
var cheerio = require('cheerio');
var urlencode = require('urlencode');
var decode = require('MyModules/decodeUtf8');
var reader;
var sendMess;
var sendStick;
function createDefaultFolder(id, callback) {
    var res = true;
    var path = __dirname + '/urls/' + id;

    var files=require(__dirname+'/config.json')['needF'];

    //console.log(files);

    fC.crFolder(path);

    if (fC.hvFolder(path)) {
        for(var i in files) {
            var hU = fC.hvFolder(path + '/'+files[i].name+'.json');
            if (!hU) {
                fC.crFile(path + '/'+files[i].name+'.json', files[i]['defS'], function () {
                });
            }
        }
    }


    res = fC.hvFolder(path) && fC.hvFolder(path + '/urls.json');
    return res;


}
function mem(id, callback) {
    console.log('here');
    var path='./urls/' + id + '/urls.json';
    //    var urls = require(path).ar;
    loadUrls(id,function(urls){


        var url;
        if (urls.length) {
            url = urls[Math.floor(Math.random() * urls.length)];
        } else {
            sendMess(id, 'Вы не добавили ни одного сообщества');
        }
       // console.log(url);

    if (url)
        request(url, function (error, response, body) {
            if (!error && response.statusCode == 200) {
                var $ = cheerio.load(body);
                var posts = $('.wall_item');
                var r = [];
                for (var i in posts) {
                    if (!Number.isInteger(i * 1) || i * 1 === 0) continue;
                    r.push(posts[i]);
                }
                var pI=Math.floor(Math.random() * r.length);
                var post = r[pI];
                var href = $(post).find('.wi_date').attr('href');
                var text = $(post).find('.wi_body').find('.pi_text').html();
                var jpgs = $(post).find('.wi_body').find('.ph_img');
                var ur='vk.com'+$(post).find('.wi_date').attr('href');
               // debug(ur);
                var njpgs = [];
                var jpg = '';
                for (var i in jpgs) {
                    if (!Number.isInteger(i * 1)) continue;
                    njpgs.push($(jpgs[i]).attr('data-src_big') || $(jpgs[i]).attr('src'));
                }
                text = text || '';
                text = decode.decode(text);
                if (text.length > 3000)text = 'Текст слишком большой так что вы можете почитать его самостоятельно- '+ur ;
                for (var i in njpgs) {
                    var jpg = njpgs[i];
                    if (jpg.indexOf('.jpg') + 1 || jpg.indexOf('.jpeg') + 1 || jpg.indexOf('.gif') + 1 || jpg.indexOf('.png') + 1 || jpg.indexOf('.tif') + 1 || jpg.indexOf('.bmp') + 1) {
                        if (jpg.indexOf('|') + 1) {
                            jpg = jpg.slice(0, jpg.length - 8)
                        }
                        sendPhoto(id, request(jpg));

                    } else {
                        sendPhoto(id, 'Попытка отправить не видос под видом ждипега была предотвращена');
                    }
                }
                //   console.log(text);
                sendMess(id, text);

            } else {
                sendMess(id, 'TIMEOUT');
            }
        });
    })
}
exports.getStick = function (s) {
    sendStick = s;
};
exports.getMess = function (m) {
    sendMess = m;
};
exports.getR = function (r) {
    reader = r;
};

exports.mainF = function (text, id) {
//    console.log(arguments);
    if (createDefaultFolder(id)) {

        mem(id, function (text) {
            sendMess(id, text)
        });
    }
};
exports.info = function () {

};
module.exports.addF = function () {
    var res = {};
    res['addUrl'] = {};
    res['addUrl']['f'] = function (text, id) {

        reader(read(id, 'Введите адресс группы', function () {
            return true
        }, addUrl), id)
    };
    res['addUrl']['disc'] = 'Добавить ссылки';
    res['getUrl'] = {};
    res['getUrl']['f'] = function (text, id) {
        loadUrls(id,logUrls);
    };
    res['getUrl']['disc'] = 'Посмотреть все ссылки';

    res['delUrl']={};
    res['delUrl']['f']=function(text,id){
        //sendMess(id,'Введите номер ссылки которую надо удалить\n'+logUrls(loadUrls(id),id));
        loadUrls(id,logUrls,'Введите номер ссылки которую надо удалить\n');
        reader(read(id,'',function(){return true},function(text,id){delUrl(text,id)}),id);
};

    return res;
};
function read(id, mess, checker, f) {
    var res = {};
    sendMess(id, mess);
    res.f = function (text) {
        var r = {};
        r.del = checker(text);
        f(text, id);
        return r;
    };
    return res;
}
function validUrl(url, callback) {
    var res = '';
    if (!(url.indexOf('vk.com') + 1))
        res = 'Эта ссылка не на группу в вк!';
    callback(res);
    //return '';
}
function addUrl(Url, id) {
    Url = Url.replace(/ /g, '');
    validUrl(Url, function (res) {
        if (!res) {
            var u = require(__dirname + '/urls/' + id + '/urls.json');
            if (!(u['ar'].indexOf(Url)+1)) {
                u['ar'].push(Url);
                saveUrls(u,id);
                sendMess(id, 'Ссылка успешно добавлена!');
            }else{
                sendMess(id, 'Такая ссылка уже есть!');
            }
        } else {
            sendMess(id, res);
        }
    })
}
function delUrl(ind,id){
    ind=ind*1;
    //console.log(arguments);
    loadUrls(id,function(urls,id) {
        if (urls[ind - 1]) {
            urls.splice(ind - 1, 1);
            saveUrls(urls, id);
            sendMess(id, 'Успешно удалено');
        } else {
            sendMess(id, 'Такой ссылки нет');
        }
    });
}
function logUrls(u,id,predMess){
    var res=predMess||'';
    for(var i=0;i< u.length;i++){
        res+=(i+1)+')'+u[i]+'\n';
    }
    res=res||'Нет ссылок';
    sendMess(id,res);
}
function loadUrls(id,callback,prMess){
    fs.readFile(__dirname + '/urls/' + id + '/urls.json',function(err,data){
        callback(JSON.parse(data.toString()),id,prMess);
    });
}
function saveUrls(urls,id){
    fC.crFile(__dirname + '/urls/' + id + '/urls.json', JSON.stringify(urls), function () {

    });
}



var sendPhoto;
exports.getPhoto = function (m) {
    sendPhoto = m;
};
