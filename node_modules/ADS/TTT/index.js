/**
 * Created by serne_000 on 15.12.2015.
 */
//
var name;
var deb=require('DEBUG').debug;

function debug(text){
    deb(text,name);
}
exports.getN=function(n){
    name=n;
};
var reader;
var games={};
function game(n,playerID,firstT){
    this.freeTok='#';
    this.map=new map(n,this.freeTok);
    this.fTurn=false;
    this.id=playerID;
    this.wL=n;
    this.n=n;
   // this.filled=0;
    function getToken(turn){
        if(turn)
            return 'O';
        else return 'X';
    }

    this.myTok=getToken(firstT);
    this.notTok=getToken(!firstT);
    games[playerID]=this;
}
function map(n,ch){

    this.map=[];
    this.n=n;
    for(var i=0;i<n;i++){
        this.map[i]=[];
        for(var j=0;j<n;j++){
            this.map[i][j]=new cell(i,j,ch);
        }
    }
};
function delGame(id){
    //console.log(id);
    if(games[id]) {
        delete games[id];
        return 'Игра успешно удалена!';
    } else{
        return 'Игра пока не начилась!';
    }
}
var sendMess;
var sendStick;
exports.getStick=function(s){
    sendStick=s;
};
exports.getMess=function(m){
    sendMess=m;
};
map.prototype.place=function(y,x,ch){
    //if()
    //console.log(y+' '+x);
    if(y<0 || x<0 ||x>=this.n||y>=this.n){
        return 'Неправильные координаты!';
    }
    if(!this.map[y][x].owned ){
        //this.filled++;
        this.map[y][x].ch=ch;
        this.map[y][x].owned=true;
        return '';
    }
return 'Сюда нельзя сходить';
};
game.prototype.isWinComb=function(a,ch){
   // console.log(a);
    var sum=0;
    var lastF;
    for(var i in a){
      //  console.log(a[i]);
        if(a[i].ch===ch)
            sum++;
        else if(a[i].ch===this.freeTok){
            lastF=a[i];
        }

    }
    //console.log(lastF);
    if(sum+1=== a.length && lastF){
        return lastF;
    }
};
game.prototype.winComb= function (a) {
  //  console.log(a);
    for(var i=0;i< a.length-1;i++){
        if(a[i].ch!==a[i+1].ch){
            return false;
        }
    }
    return a[0].ch===this.notTok;
};
game.prototype.hasWin=function(l){
    //console.log('l');
    for(var i=0;i<this.map.n;i++){
        for(var j=0;j<=this.map.n-l;j++){

            var a=[];
            for(var k=j;k<j+l;k++){
                a.push(this.map.map[i][k]);
            }
            var c=this.winComb(a);
            if(c) return c;
        }
    };
    //console.log('d');
    for(var i=0;i<=this.map.n-l;i++){
        for(var j=0;j<this.map.n;j++){

            var a=[];
            for(var k=i;k<i+l;k++){
                a.push(this.map.map[k][j]);
            }
            var c=this.winComb(a);
            if(c) return c;
        }
    }
   // console.log('d1');
    for(var i=0;i<=this.map.n-l;i++){
        for(var j=0;j<=this.map.n-l;j++){

            var a=[];
            for(var k=0;k<l;k++){
                a.push(this.map.map[i+k][j+k]);
            }
            var c=this.winComb(a);
            if(c) return c;
        }
    }
    for(var i=this.map.n-1;i>=l-1;i--){
        for(var j=0;j<=this.map.n-l;j++){

            var a=[];
            for(var k=0;k<l;k++){
                a.push(this.map.map[i-k][j+k]);
            }
            var c=this.winComb(a);
            if(c) return c;
        }
    }
    return false;
}
game.prototype.gaTurn=function(y,x){
    return this.map.place(/*this.map.n-*/y/*-1*/,x,this.myTok);
};
game.prototype.plTurn=function(y,x){
    return this.map.place(/*this.map.n-*/y/*-1*/,x,this.notTok);
};
game.prototype.logDeck=function(){
    var res='';
    for(var i=0;i<this.map.n;i++){

        for(var j=0;j<this.map.n;j++){

            res+=this.map.map[i][j].ch;

        }

        res+='\n';
    }
    return res;
};
game.prototype.isEnWin=function(){


};
game.prototype.findTrouble=function(l,ch){
    for(var i=0;i<this.map.n;i++){
        for(var j=0;j<=this.map.n-l;j++){

            var a=[];
            for(var k=j;k<j+l;k++){
                a.push(this.map.map[i][k]);
            }
            var c=this.isWinComb(a,ch);
            if(c) return c;
        }
    };
    for(var i=0;i<=this.map.n-l;i++){
        for(var j=0;j<this.map.n;j++){

            var a=[];
            for(var k=i;k<i+l;k++){
                a.push(this.map.map[k][j]);
            }
            var c=this.isWinComb(a,ch);
            if(c) return c;
        }
    }
    for(var i=0;i<=this.map.n-l;i++){
        for(var j=0;j<=this.map.n-l;j++){

            var a=[];
            for(var k=0;k<l;k++){
                a.push(this.map.map[i+k][j+k]);
            }
            var c=this.isWinComb(a,ch);
            if(c) return c;
        }
    }
   // console.log('d2');
    for(var i=this.map.n-1;i>=l-1;i--){
        //  console.log('her');
        for(var j=0;j<=this.map.n-l;j++){

            var a=[];
            for(var k=0;k<l;k++){
                //   console.log((i-k)+' '+(j+k));
                a.push(this.map.map[i-k][j+k]);
                //   a.push(this.map.map[i-k,j+k]);
            }
          //  console.log(a);
            var c=this.isWinComb(a,ch);
            if(c) return c;
        }
    }
};
game.prototype.findFree=function(){
    for(var i=0;i<this.map.n;i++){
        for(var j=0;j<this.map.n;j++){
            if(this.map.map[i][j].ch===this.freeTok){
                return  this.map.map[i][j];
            }
        }
    }
};
game.prototype.turn=function(){
    var loss=this.hasWin(this.wL);
    if(loss){
        delGame(this.id);
        return this.logDeck()+'\nЯ проиграл!';
    }
    var win=this.findTrouble(this.wL,this.myTok);
    if(win) {
        this.gaTurn(win.y, win.x);
        delGame(this.id);
        return this.logDeck()+'\nЯ выйграл!';

    }
    var trouble=this.findTrouble(this.wL,this.notTok);
    if(trouble) {
        this.gaTurn(trouble.y, trouble.x);
        if(this.allFilled()) {
            delGame(this.id);
            return this.logDeck() + '\nЯ сделал ход в ' + (trouble.y + 1) + ' ' + (trouble.x + 1)+'\n'+'Ничья!';
        } else return this.logDeck() + '\nЯ сделал ход в ' + (trouble.y + 1) + ' ' + (trouble.x + 1);
    }
   // console.log(2);
    var freeC=this.findFree();
    if(freeC ) {
        this.gaTurn(freeC.y, freeC.x);
        if(this.allFilled()) {
            delGame(this.id);
            return this.logDeck() + '\nЯ сделал ход в ' + (freeC.y + 1) + ' ' + (freeC.x + 1)+'\n'+'Ничья!';
        } else return this.logDeck() + '\nЯ сделал ход в ' + (freeC.y + 1) + ' ' + (freeC.x + 1);
    } else{
        delGame(this.id);
        return this.logDeck()+'\nНичья!';
    }
};
game.prototype.allFilled=function(){
   // console.log(this.n);
    for(var i=0;i<this.n;i++) {
       // console.log(!this.map.map[i][j].owned);
        for (var j = 0; j < this.n; j++) {

            if (!this.map.map[i][j].owned) {
                return false;
            }
        }
    }
    return true;
}
function cell(y,x,ch){
    this.ch=ch;
    this.owned=false;
    this.y=y;
    this.x=x;
}
function getGByID(id){
    return games[id];
};
function br(plId,y,x){
    var game=getGByID(plId);

        var r=game.map.place(y,x,game.notTok);
      //  console.log(arguments);
        if(!r){
            return game.turn();
        }else{
            return r;
        }
}
function crGame(n,plId,fir){

   // console.log(arguments);
  //  console.log('1');
    if (!(n>1 && n<11)) {
        return 'Неправильная размерность[2;10]';
    }
    //console.log('1');
    var g=new game(n,plId,fir);
    var res='';
    if(!fir) {
        res = g.turn();
    //    console.log(res);
    }
    else
        res= g.logDeck()+'Твой ход!';

  //  console.log('1');
  //  console.log(res);
    return res;
};
function read(chId){
    var msg='Введите размер поля и хотите ли вы ходить 1ым(да/нет)';
    sendMess(chId,msg);
    var f=function(ans){
        var r;
        var words=ans.split(' ');
        for(var i in words){
            if(words[i]===' ' || words[i]==='\n'){
                words.splice(i,1);
            }
        }
        var n;
        if(words[0]*1>0 && words[0]*1>0){
            n=words[0];
        }else{
            var a={};
            a.del=false;
            sendMess(chId,'Неправильный ввод!');
            return a;
        }
        var tr;
        // console.log(words);
        if(words[1]){
            switch (words[1]){
                case 'да':tr=true;break;
                default :tr=false;break;
            }
        }else{
            var a={};
            a.del=false;
            a.msg='Неправильный ввод!';
            return a;
        }
        //   console.log(n,tr);
        var a={};
        a.del=true;
        a.msg=crGame(n,chId,tr);
        sendMess(chId, a.msg);
        return a;
    }

    var res={};
    res.msg=msg;
    res.f=f;
    return res;
}
function info(){
   // console.log('h');
    return 'Крестики-нолики';
}

function read1(id){
    var res={};
    sendMess(id,'Введите координаты!');
    res.f=function(text){
        var r={};
        r.del=true;
        mainF(text,id);
        return r;

    };
    return res;
}
module.exports.getR=function(r){
    reader=r;
}
module.exports.info=info;
module.exports.read=read;
module.exports.getG=getGByID;
module.exports.crG=crGame;
module.exports.tu=br;
function mainF(text,id){

    if(getGByID(id)){
        var words=text.split(' ');
        for(var i in words){
            if(words[i]===' ' || words[i]==='\n'){
                words.splice(i,1);
            }
        }
        if(!words[0] || !words[1]){
            //sendMess (id,'Не правильный ввод!');
            var r= read1(id);
            reader(r,id);
            return;
        }
        // console.log('h');
        sendMess(id, br(id,words[0]-1,words[1]-1));
    }else{
      //  console.log('here');
        var res=read(id);
        reader(res,id);
        //sendMess(id,res.msg);
    }
};
module.exports.mainF=mainF;
module.exports.addF=function(){
    var res={};
    var f=function(text,id){
       return delGame(id);
    };
    res['dg']={};
    res['dg']['f']=f;
    res['dg']['disc']='Прекратить игру в крестки-нолики';
    var f1=function(text,id){
        var game=getGByID(id);
        if(game){
            return game.logDeck();
        }else {
            return 'Игра пока не началась';
        }
    };
    res['ld']={};
    res['ld']['f']=f1;
    res['ld']['disc']='Вывести поле на текущий момент';
    return res;
};




//var g=new game(3,5,true);

//console.log(g.allFilled());

//console.log(Number.isInteger(1));
var sendPhoto;
exports.getPhoto=function(m){
    sendPhoto=m;
};
